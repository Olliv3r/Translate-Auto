1
00:00:04,230 --> 00:00:09,440
So let's write a first version of microblog flask.

2
00:00:09,430 --> 00:00:16,020
It's a simple enough framework that you can write an entire application in a single file but that is

3
00:00:16,020 --> 00:00:17,630
not what I'm going to do here.

4
00:00:17,640 --> 00:00:21,360
We are going to be growing this application considerably.

5
00:00:21,360 --> 00:00:27,420
So I'm going to start from a better project structure before you begin.

6
00:00:27,420 --> 00:00:35,550
Remember to make your microblog directory your current directory and also to activate the virtual environment.

7
00:00:36,090 --> 00:00:43,020
So the first thing that I'm going to do is I'm going to create a package where the application source

8
00:00:43,020 --> 00:00:44,890
files will live.

9
00:00:45,090 --> 00:00:47,530
My package is going to be called up.

10
00:00:47,730 --> 00:00:51,270
So I create a directory for it in python.

11
00:00:51,270 --> 00:00:58,150
A package is a directory that has a special module that's called in it thought pi.

12
00:00:58,170 --> 00:01:00,110
So now I'm going to create this module

13
00:01:06,490 --> 00:01:14,000
A quick note about editors you should know that you can use any text editor that you like to write your

14
00:01:14,090 --> 00:01:16,580
Python application for this tutorial.

15
00:01:16,580 --> 00:01:20,140
I'm going to use them but that is not a requirement.

16
00:01:20,240 --> 00:01:27,050
If you like more powerful editors are actually ideas such as pi charm or Visual Studio code.

17
00:01:27,140 --> 00:01:30,410
Those are perfectly fine for this tutorial.

18
00:01:31,240 --> 00:01:47,830
So OK I'm going to write the code for the init PI Montral.

19
00:01:48,300 --> 00:01:51,710
So let's go over this code in line 1.

20
00:01:51,710 --> 00:01:57,470
I'm importing a flask class with uppercase F from the flask package.

21
00:01:57,490 --> 00:02:03,550
You'll recall that when we tested a flask was correctly installed in our virtual environment we typed

22
00:02:03,590 --> 00:02:05,070
in port flask.

23
00:02:05,110 --> 00:02:11,460
In this case I'm using a more specialized import where I'm defining exactly what I need to import from

24
00:02:11,470 --> 00:02:16,080
flask instead of importing the entire package in Langtry.

25
00:02:16,120 --> 00:02:23,040
I create an instance of this class flask that I imported and I store it in a variable called app..

26
00:02:23,230 --> 00:02:28,520
The argument that I'm passing to flask is the name variable from Python.

27
00:02:28,540 --> 00:02:35,680
This variable provides the name of the package flask uses this value to find out what's the location

28
00:02:35,680 --> 00:02:42,010
of this package on disk so that it can then locate other files in the same location in 9:5.

29
00:02:42,010 --> 00:02:49,240
I'm importing a route's module also from this package and this module doesn't exist yet.

30
00:02:49,270 --> 00:02:51,840
This is what I'm going to write next.

31
00:02:51,910 --> 00:02:58,090
You may find it odd that there is an import in the bottom line we normally put imports at the top.

32
00:02:58,090 --> 00:03:06,010
In Python This is done intentionally to avoid a common problem with flask which is the problem of circular

33
00:03:06,040 --> 00:03:07,570
dependencies.

34
00:03:07,630 --> 00:03:14,080
You are going to see in a moment when I write the routes module that this module needs to import this

35
00:03:14,500 --> 00:03:15,410
variable.

36
00:03:15,730 --> 00:03:21,270
This creates a mutual dependency between these two modules and if I put this import at the top will

37
00:03:21,280 --> 00:03:23,750
make Python throw errors.

38
00:03:23,770 --> 00:03:30,910
There are a few ways to address similar dependency problems in Python and one of the methods is to move

39
00:03:30,970 --> 00:03:37,150
the offending import on one of the modules to the bottom so that is what I'm doing here so I can save

40
00:03:37,150 --> 00:03:43,020
this and move to the next module which is route's top pie.

41
00:03:43,060 --> 00:03:48,120
So I'm going to open up slash Krauts.

42
00:03:48,190 --> 00:03:49,570
Py.

43
00:03:49,880 --> 00:03:56,070
And this is going to be the module in which I'm going to define the logic of the application.

44
00:03:56,290 --> 00:03:58,720
So I'm going to start with something very simple.

45
00:03:58,800 --> 00:04:06,730
What I want to do is that when I connect this application from a web browser I want to see a Hello World

46
00:04:07,000 --> 00:04:11,160
message displayed in the browser page.

47
00:04:11,240 --> 00:04:19,760
What I can do is I can write a function that returns the text that I want to see in the browser.

48
00:04:19,760 --> 00:04:24,870
I'm going to call it index and it's going to return.

49
00:04:25,100 --> 00:04:29,710
Hello world.

50
00:04:29,810 --> 00:04:37,850
Now I need to tell flask that this is the function that I want to execute when a user connects to the

51
00:04:37,850 --> 00:04:45,740
application from a web browser and flask provides a decorator to do that.

52
00:04:45,860 --> 00:04:48,500
You may not be familiar with decorators.

53
00:04:48,500 --> 00:04:54,680
This is a very cool feature of the Python language that allows you to enhance functions with additional

54
00:04:54,680 --> 00:04:55,760
behavior.

55
00:04:55,780 --> 00:05:03,770
Decorator is written above a function and it starts with the sign they approach decorator from flask

56
00:05:04,130 --> 00:05:08,470
creates a mapping between a u r l and a function.

57
00:05:08,480 --> 00:05:17,180
So here I'm saying that I want to associate the slash r l so that the top level you are l of my application

58
00:05:17,690 --> 00:05:25,830
with this function to make this work I need to import my application which was defined in it.

59
00:05:25,850 --> 00:05:33,940
By now I should note these two apps here that I've seen some people getting confused with.

60
00:05:34,010 --> 00:05:41,930
We have an app package which is this one this is represented on disk by the app directory and we also

61
00:05:41,930 --> 00:05:49,880
have an app variable that I'd find in any top pie here.

62
00:05:49,880 --> 00:05:56,930
So what I'm doing here is I'm importing the app variable defined inside the app package.

63
00:05:56,960 --> 00:06:02,780
I've seen some people that prefer to use the same name for the package and the application instance

64
00:06:03,230 --> 00:06:06,750
and an equal number of people prefer to use different names.

65
00:06:06,770 --> 00:06:13,180
So if you find this confusing it's totally fine if you use a different name for one of these two.

66
00:06:13,280 --> 00:06:19,930
And I would like to suggest that in that case you rename your directory and your package to.

67
00:06:20,030 --> 00:06:26,960
For example my app and then you will have different names so to complete this example I'm going to add

68
00:06:27,020 --> 00:06:27,810
a second.

69
00:06:27,900 --> 00:06:32,260
Well that's also going to be mapped to the same function.

70
00:06:32,270 --> 00:06:36,080
This is perfectly fine you can chain decorators.

71
00:06:36,140 --> 00:06:40,160
And in this case the opera decorator will allow you to assign more than one.

72
00:06:40,160 --> 00:06:43,280
You are able to the same function.

73
00:06:43,820 --> 00:06:49,730
So now we created our first flask route before we can run this example.

74
00:06:49,730 --> 00:06:55,610
We need to add a top level script that represent the application.

75
00:06:55,640 --> 00:07:00,100
So this goes outside of the package in the microblog directory.

76
00:07:00,330 --> 00:07:10,460
I'm going to call the script microblog not pi and the only thing that the script needs to do is import

77
00:07:10,550 --> 00:07:13,670
the applications from the app package.

78
00:07:13,670 --> 00:07:22,380
We import app and this is from where flask is going to obtain our application instance.

79
00:07:22,810 --> 00:07:24,090
It's now complete.

80
00:07:24,100 --> 00:07:26,520
So I can save and exit

81
00:07:29,640 --> 00:07:34,380
and to tell flask where the application is located.

82
00:07:34,470 --> 00:07:45,750
Now I need to define an environment variable called flask up so floss is going to be set to microblog

83
00:07:45,750 --> 00:07:51,090
that pi which is the module that defines the application.

84
00:07:51,160 --> 00:07:57,760
We do not need to get flask the name of the application because by the default flag we look for a variable

85
00:07:57,760 --> 00:08:06,760
called app in this module that we said in this environment variable if you're working on Windows and

86
00:08:06,790 --> 00:08:14,440
you're using the command prompt then to set an environment variable you will use set instead of export

87
00:08:16,540 --> 00:08:17,860
like that.

88
00:08:17,890 --> 00:08:19,750
So keep that in mind.

89
00:08:21,160 --> 00:08:25,830
Now we are ready to run the first version of our application.

90
00:08:25,870 --> 00:08:35,550
So for that I'm going to say a flask run and that started the application server.

91
00:08:35,820 --> 00:08:40,050
Here you see that the command shows me the location of the application.

92
00:08:40,050 --> 00:08:45,080
This is how I'm going to access this application from my web browser.

93
00:08:45,360 --> 00:08:57,890
So what I can do now is copy the while and go to a web browser and paste it and we see here.

94
00:08:58,400 --> 00:09:01,950
We're going to make this a little bit bigger.

95
00:09:02,710 --> 00:09:05,160
So let's review what happened here.

96
00:09:05,350 --> 00:09:14,110
The web browser or receive the URL that I typed in the address bar then it sent a request to this IP

97
00:09:14,110 --> 00:09:17,230
address which is the IP address of your own machine.

98
00:09:17,230 --> 00:09:18,790
This is always the same.

99
00:09:18,820 --> 00:09:23,220
This refers to your own machine and this number.

100
00:09:23,390 --> 00:09:26,320
Web servers run on an IP address an important number.

101
00:09:26,320 --> 00:09:30,790
So these are the ones that the flask server is using.

102
00:09:30,790 --> 00:09:37,060
So the browser has sent the request and since there is no path it's going to request the slash you are

103
00:09:37,060 --> 00:09:39,140
l the top level you are l.

104
00:09:39,160 --> 00:09:44,500
So flask on the server receives the request that want URL is slash.

105
00:09:44,500 --> 00:09:47,520
So it looks at all that you or else it knows about.

106
00:09:47,770 --> 00:09:49,660
And it found a match.

107
00:09:49,870 --> 00:09:53,800
So then it invokes the function that was associated with that.

108
00:09:53,800 --> 00:10:00,990
You know when the function returns flask takes the return value and passes it on back to the client.

109
00:10:01,000 --> 00:10:05,590
That web browser and the web browser then displays it on the page.

110
00:10:05,590 --> 00:10:07,620
So it's pretty simple right.

111
00:10:07,630 --> 00:10:12,830
If you recall I have also said a second you are l associated with the same function.

112
00:10:12,820 --> 00:10:21,430
So that was slash index if I type slash index in the address bar I still get the same response.

113
00:10:21,880 --> 00:10:23,890
But if I type something else.

114
00:10:23,900 --> 00:10:30,550
So for example slash foo then I get an error because flask does not know about Slash.

115
00:10:30,580 --> 00:10:33,280
We didn't write any routes for this.

116
00:10:33,280 --> 00:10:42,430
You are going to go back to my terminal window and here when I need to stop the server I need to press

117
00:10:42,510 --> 00:10:48,130
control-C and that is going to bring you back to your command prompt.

118
00:10:48,130 --> 00:10:51,070
This completes the first version of microblog.

119
00:10:51,070 --> 00:10:56,730
I suggest you familiarize yourself with this project by making changes to this application.

120
00:10:56,770 --> 00:11:03,370
You may want to add more routes to implement different you or else different responses different text.

121
00:11:03,490 --> 00:11:09,070
If you know a little bit of a DML you can write the email in that response.

122
00:11:09,090 --> 00:11:11,480
It doesn't need to be just a string.

123
00:11:11,500 --> 00:11:17,740
You can include a DML elements in it and once you feel comfortable that you have an understanding of

124
00:11:17,740 --> 00:11:23,230
how routes work in flask I think you're ready to move to chapter two.
